{"ast":null,"code":"import Ball from \"./Ball\";\nimport Player from \"./Player\";\nimport Square from \"./Square\";\nimport Ellipse from \"./Ellipse\";\nimport Line from \"./Line\";\nimport Point from \"./Point\";\nimport Text from \"./Text\";\nconst ElementIDPrefix = {\n  Ball: 'bl',\n  Player: 'pl',\n  Square: 'sq',\n  Ellipse: 'el',\n  Line: 'ln',\n  Text: 'txt'\n};\n\nclass PitchFutsal {\n  constructor() {\n    this.players = [];\n    this.balls = [];\n    this.squareID = -1;\n    this.squares = [];\n    this.ellipseID = -1;\n    this.ellipses = [];\n    this.lineID = -1;\n    this.lines = [];\n    this.textID = -1;\n    this.texts = [];\n    this._overlay = \"none\";\n    this.isModified = false;\n    this.onModified = null;\n  }\n\n  initDefault(noPlayers, noPlayerColors, playerSize, noBalls, noBallColors, ballSize) {\n    this._initPlayers(noPlayers, noPlayerColors, playerSize);\n\n    this._initBalls(noBalls, noBallColors, ballSize);\n  }\n\n  _initPlayers(noPlayers, noPlayerColors, playerSize) {\n    let groupSize = Math.floor(noPlayers / noPlayerColors);\n\n    for (var i = 0; i < noPlayers; i++) {\n      let color = Math.floor(i / groupSize);\n      let number = groupSize - i % groupSize;\n      let player = new Player(ElementIDPrefix.Player + i, number, \"\", color, color * playerSize, 0, 0, color * playerSize, 0, number);\n      this.players.push(player);\n    }\n  }\n\n  _initBalls(noBalls, noBallColors, ballSize) {\n    let groupSize = Math.floor(noBalls / noBallColors);\n\n    for (var i = 0; i < noBalls; i++) {\n      let color = Math.floor(i / groupSize);\n      let ball = new Ball(ElementIDPrefix.Ball + i, color, color * ballSize, 0, color * ballSize, 0);\n      this.balls.push(ball);\n    }\n  }\n\n  _modified() {\n    let cp = new PitchFutsal();\n    cp.isModified = true;\n    cp.players = this.players;\n    cp.balls = this.balls;\n    cp.squareID = this.squareID;\n    cp.squares = this.squares;\n    cp.ellipseID = this.ellipseID;\n    cp.ellipses = this.ellipses;\n    cp.lineID = this.lineID;\n    cp.lines = this.lines;\n    cp.textID = this.textID;\n    cp.texts = this.texts;\n    cp._overlay = this.overlay; // trigger event modified\n\n    if (null !== this.onModified) {\n      this.onModified(cp);\n    }\n  }\n\n  playerMove(id, deltaX, deltaY) {\n    this.players = this.players.map(p => {\n      if (id === p.id) {\n        p.x += deltaX;\n        p.y += deltaY;\n      }\n\n      return p;\n    });\n\n    this._modified();\n  }\n\n  playerEditStart(id) {\n    if (!id.startsWith(ElementIDPrefix.Player)) {\n      return null;\n    } // Edit player data\n\n\n    const p = this.players.find(p => id === p.id); // disable editing non placed players\n\n    if (!p.isPlaced) {\n      return null;\n    }\n\n    const editPlayer = {\n      id: p.id,\n      name: p.name,\n      no: p.no\n    };\n    return editPlayer;\n  }\n\n  playerEditDone(player) {\n    this.players = this.players.map(p => {\n      if (player.id !== p.id) {\n        return p;\n      }\n\n      if (player.remove) {\n        p.reset();\n      } else {\n        p.name = player.name;\n        p.no = player.no;\n      }\n\n      return p;\n    });\n\n    this._modified();\n  }\n\n  ballMove(id, deltaX, deltaY) {\n    this.balls = this.balls.map(b => {\n      if (id === b.id) {\n        b.x += deltaX;\n        b.y += deltaY;\n      }\n\n      return b;\n    });\n\n    this._modified();\n  }\n\n  lineNewID() {\n    this.lineID += 1;\n    return ElementIDPrefix.Line + this.lineID;\n  }\n\n  lineCreate(x, y, color, arrowStart, arrowEnd, isDashed) {\n    let l = new Line(this.lineNewID(), color, new Point(x, y), new Point(x, y), new Point(x, y), new Point(x, y), arrowStart, arrowEnd, isDashed);\n    this.lines = this.lines.map(lx => lx);\n    this.lines.push(l);\n\n    this._modified();\n\n    return l.id;\n  }\n\n  lineResize(id, x2, y2) {\n    this.lines = this.lines.map(l => {\n      if (id === l.id) {\n        l.resize(x2, y2);\n      }\n\n      return l;\n    });\n\n    this._modified();\n  }\n\n  lineEdit(pid, id, deltaX, deltaY) {\n    this.lines = this.lines.map(l => {\n      if (id === l.id) {\n        l.edit(pid, deltaX, deltaY);\n      }\n\n      return l;\n    });\n\n    this._modified();\n  } // remove empty lines\n\n\n  lineCleanup() {\n    this.lines = this.lines.filter(l => !l.empty());\n\n    this._modified();\n  }\n\n  lineEditStart(id) {\n    if (!id.startsWith(ElementIDPrefix.Line)) {\n      return false;\n    }\n\n    this.lines = this.lines.map(l => {\n      if (id === l.id) {\n        l.isEdit = true;\n      }\n\n      return l;\n    });\n\n    this._modified();\n\n    return true;\n  }\n\n  lineEditEnd() {\n    this.lines = this.lines.map(l => {\n      l.isEdit = false;\n      return l;\n    });\n\n    this._modified();\n  }\n\n  ellipseNewID() {\n    this.ellipseID += 1;\n    return ElementIDPrefix.Ellipse + this.ellipseID;\n  }\n\n  ellipseCreate(x, y, color, isDashed) {\n    let el = new Ellipse(this.ellipseNewID(), color, x, y, 0, 0, 0, isDashed);\n    this.ellipses = this.ellipses.map(e => e);\n    this.ellipses.push(el);\n\n    this._modified();\n\n    return el.id;\n  }\n\n  ellipseResize(id, x2, y2, proportional) {\n    this.ellipses = this.ellipses.map(el => {\n      if (id === el.id) {\n        el.resize(x2, y2, proportional);\n      }\n\n      return el;\n    });\n\n    this._modified();\n  }\n\n  ellipseEdit(corner, id, deltaX, deltaY) {\n    if (!id.startsWith(ElementIDPrefix.Ellipse)) {\n      return;\n    }\n\n    this.ellipses = this.ellipses.map(el => {\n      if (id === el.id) {\n        el.edit(corner, deltaX, deltaY);\n      }\n\n      return el;\n    });\n\n    this._modified();\n  }\n\n  ellipseRotate(id, posX, posY, snap) {\n    if (!id.startsWith(ElementIDPrefix.Ellipse)) {\n      return;\n    }\n\n    this.ellipses = this.ellipses.map(el => {\n      if (id === el.id) {\n        el.rotate(posX, posY, snap);\n      }\n\n      return el;\n    });\n\n    this._modified();\n  } // remove empty ellipses\n\n\n  ellipseCleanup() {\n    this.ellipses = this.ellipses.filter(el => el.rx > 0 && el.ry > 0);\n\n    this._modified();\n  }\n\n  ellipseEditStart(id) {\n    if (!id.startsWith(ElementIDPrefix.Ellipse)) {\n      return false;\n    }\n\n    this.ellipses = this.ellipses.map(el => {\n      if (id === el.id) {\n        el.isEdit = true;\n      }\n\n      return el;\n    });\n\n    this._modified();\n\n    return true;\n  }\n\n  ellipsesEditEnd() {\n    this.ellipses = this.ellipses.map(el => {\n      el.isEdit = false;\n      return el;\n    });\n  }\n\n  squareNewID() {\n    this.squareID += 1;\n    return ElementIDPrefix.Square + this.squareID;\n  }\n\n  squareCreate(x, y, color, isDashed) {\n    let sq = new Square(this.squareNewID(), color, x, y, 0, 0, 0, isDashed);\n    this.squares = this.squares.map(s => s);\n    this.squares.push(sq);\n\n    this._modified();\n\n    return sq.id;\n  }\n\n  squareResize(id, x2, y2, proportional) {\n    this.squares = this.squares.map(sq => {\n      if (id === sq.id) {\n        sq.resize(x2, y2, proportional);\n      }\n\n      return sq;\n    });\n\n    this._modified();\n  }\n\n  squareEdit(corner, id, deltaX, deltaY) {\n    if (!id.startsWith(ElementIDPrefix.Square)) {\n      return;\n    }\n\n    this.squares = this.squares.map(sq => {\n      if (id === sq.id) {\n        sq.edit(corner, deltaX, deltaY);\n      }\n\n      return sq;\n    });\n\n    this._modified();\n\n    return this.squares;\n  }\n\n  squareRotate(id, posX, posY, snap) {\n    if (!id.startsWith(ElementIDPrefix.Square)) {\n      return;\n    }\n\n    this.squares = this.squares.map(sq => {\n      if (id === sq.id) {\n        sq.rotate(posX, posY, snap);\n      }\n\n      return sq;\n    });\n\n    this._modified();\n  } // remove empty squares\n\n\n  squareCleanup() {\n    this.squares = this.squares.filter(sq => sq.width > 0 && sq.height > 0);\n\n    this._modified();\n  }\n\n  squareEditStart(id) {\n    if (!id.startsWith(ElementIDPrefix.Square)) {\n      return false;\n    }\n\n    this.squares = this.squares.map(sq => {\n      if (id === sq.id) {\n        sq.isEdit = true;\n      }\n\n      return sq;\n    });\n\n    this._modified();\n\n    return true;\n  }\n\n  squareEditEnd() {\n    this.squares = this.squares.map(sq => {\n      sq.isEdit = false;\n      return sq;\n    });\n  }\n\n  textNewID() {\n    this.textID += 1;\n    return ElementIDPrefix.Text + this.textID;\n  }\n\n  textCreate(x, y, color, size) {\n    let tx = new Text(this.textNewID(), color, size, \"\", x, y, 0, false, true);\n    this.texts = this.texts.map(t => t);\n    this.texts.push(tx);\n\n    this._modified();\n\n    return tx.id;\n  }\n\n  textEditDone(id, text, bx, by, bwidth, bheight) {\n    this.texts = this.texts.map(t => {\n      if (id === t.id) {\n        t.isEdit = false;\n        t.isTextEdit = false;\n        t.text = text;\n        t.bx = bx;\n        t.by = by;\n        t.bwidth = bwidth;\n        t.bheight = bheight;\n      }\n\n      return t;\n    });\n\n    this._modified();\n  }\n\n  textEditStart(id) {\n    if (!id.startsWith(ElementIDPrefix.Text)) {\n      return false;\n    }\n\n    this.texts = this.texts.map(tx => {\n      if (id === tx.id) {\n        tx.isEdit = true;\n      }\n\n      return tx;\n    });\n\n    this._modified();\n\n    return true;\n  }\n\n  textMove(id, deltaX, deltaY) {\n    if (!id.startsWith(ElementIDPrefix.Text)) {\n      return;\n    }\n\n    this.texts = this.texts.map(tx => {\n      if (id === tx.id) {\n        tx.move(deltaX, deltaY);\n      }\n\n      return tx;\n    });\n\n    this._modified();\n  }\n\n  textRotate(id, posX, posY, snap) {\n    if (!id.startsWith(ElementIDPrefix.Text)) {\n      return;\n    }\n\n    this.texts = this.texts.map(tx => {\n      if (id === tx.id) {\n        tx.rotate(posX, posY, snap);\n      }\n\n      return tx;\n    });\n\n    this._modified();\n  }\n\n  editTopLeft(id, deltaX, deltaY) {\n    this.squareEdit(\"tl\", id, deltaX, deltaY);\n    this.ellipseEdit(\"tl\", id, deltaX, deltaY);\n  }\n\n  editTopRight(id, deltaX, deltaY) {\n    this.squareEdit(\"tr\", id, deltaX, deltaY);\n    this.ellipseEdit(\"tr\", id, deltaX, deltaY);\n  }\n\n  editBottomLeft(id, deltaX, deltaY) {\n    this.squareEdit(\"bl\", id, deltaX, deltaY);\n    this.ellipseEdit(\"bl\", id, deltaX, deltaY);\n  }\n\n  editBottomRight(id, deltaX, deltaY) {\n    this.squareEdit(\"br\", id, deltaX, deltaY);\n    this.ellipseEdit(\"br\", id, deltaX, deltaY);\n  }\n\n  editMove(id, deltaX, deltaY) {\n    this.squareEdit(\"mv\", id, deltaX, deltaY);\n    this.ellipseEdit(\"mv\", id, deltaX, deltaY);\n    this.textMove(id, deltaX, deltaY);\n  }\n\n  editRotate(id, posX, posY, snap) {\n    this.squareRotate(id, posX, posY, snap);\n    this.ellipseRotate(id, posX, posY, snap);\n    this.textRotate(id, posX, posY, snap);\n  }\n\n  endAllEdits() {\n    this.lineEditEnd();\n    this.squareEditEnd();\n    this.ellipsesEditEnd(); // TODO: Text end editing\n\n    this._modified();\n  }\n\n  get overlay() {\n    return this._overlay;\n  }\n\n  set overlay(value) {\n    if (this._overlay === value) {\n      return;\n    }\n\n    this._overlay = value;\n\n    this._modified();\n  }\n\n  overlaySize() {\n    switch (this.overlay) {\n      case \"exercise\":\n        return {\n          width: 2800,\n          height: 2000\n        };\n\n      case \"basketball\":\n        return {\n          width: 2800,\n          height: 1500\n        };\n\n      case \"volleyball\":\n        return {\n          width: 1800,\n          height: 900\n        };\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexport default PitchFutsal;","map":{"version":3,"sources":["/home/fsat/repos/tactics-board/src/pitch/PitchFutsal.js"],"names":["Ball","Player","Square","Ellipse","Line","Point","Text","ElementIDPrefix","PitchFutsal","constructor","players","balls","squareID","squares","ellipseID","ellipses","lineID","lines","textID","texts","_overlay","isModified","onModified","initDefault","noPlayers","noPlayerColors","playerSize","noBalls","noBallColors","ballSize","_initPlayers","_initBalls","groupSize","Math","floor","i","color","number","player","push","ball","_modified","cp","overlay","playerMove","id","deltaX","deltaY","map","p","x","y","playerEditStart","startsWith","find","isPlaced","editPlayer","name","no","playerEditDone","remove","reset","ballMove","b","lineNewID","lineCreate","arrowStart","arrowEnd","isDashed","l","lx","lineResize","x2","y2","resize","lineEdit","pid","edit","lineCleanup","filter","empty","lineEditStart","isEdit","lineEditEnd","ellipseNewID","ellipseCreate","el","e","ellipseResize","proportional","ellipseEdit","corner","ellipseRotate","posX","posY","snap","rotate","ellipseCleanup","rx","ry","ellipseEditStart","ellipsesEditEnd","squareNewID","squareCreate","sq","s","squareResize","squareEdit","squareRotate","squareCleanup","width","height","squareEditStart","squareEditEnd","textNewID","textCreate","size","tx","t","textEditDone","text","bx","by","bwidth","bheight","isTextEdit","textEditStart","textMove","move","textRotate","editTopLeft","editTopRight","editBottomLeft","editBottomRight","editMove","editRotate","endAllEdits","value","overlaySize"],"mappings":"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","sourcesContent":["import Ball from \"./Ball\";\nimport Player from \"./Player\";\nimport Square from \"./Square\";\nimport Ellipse from \"./Ellipse\";\nimport Line from \"./Line\";\nimport Point from \"./Point\";\nimport Text from \"./Text\";\n\nconst ElementIDPrefix = {\n\tBall: 'bl',\n\tPlayer: 'pl',\n\tSquare: 'sq',\n\tEllipse: 'el',\n\tLine: 'ln',\n\tText: 'txt'\n}\n\nclass PitchFutsal {\n\n\tconstructor() {\n\t\tthis.players = [];\n\t\tthis.balls = [];\n\n\t\tthis.squareID = -1;\n\t\tthis.squares = [];\n\t\tthis.ellipseID = -1;\n\t\tthis.ellipses = [];\n\t\tthis.lineID = -1;\n\t\tthis.lines = [];\n\t\tthis.textID = -1;\n\t\tthis.texts = [];\n\n\t\tthis._overlay = \"none\";\n\n\t\tthis.isModified = false;\n\t\tthis.onModified = null;\n\t}\n\n\tinitDefault(noPlayers, noPlayerColors, playerSize, noBalls, noBallColors, ballSize) {\n\t\tthis._initPlayers(noPlayers, noPlayerColors, playerSize);\n\t\tthis._initBalls(noBalls, noBallColors, ballSize);\n\t}\n\n\t_initPlayers(noPlayers, noPlayerColors, playerSize) {\n\t\tlet groupSize = Math.floor(noPlayers / noPlayerColors);\n\t\tfor (var i = 0; i < noPlayers; i++) {\n\t\t\tlet color = Math.floor(i / groupSize);\n\t\t\tlet number = groupSize - (i % groupSize);\n\t\t\tlet player = new Player(\n\t\t\t\tElementIDPrefix.Player + i, number, \"\", color,\n\t\t\t\tcolor * playerSize, 0,\n\t\t\t\t0,\n\t\t\t\tcolor * playerSize, 0,\n\t\t\t\tnumber\n\t\t\t);\n\t\t\tthis.players.push(player);\n\t\t}\n\t}\n\n\t_initBalls(noBalls, noBallColors, ballSize) {\n\t\tlet groupSize = Math.floor(noBalls / noBallColors);\n\t\tfor (var i = 0; i < noBalls; i++) {\n\t\t\tlet color = Math.floor(i / groupSize);\n\t\t\tlet ball = new Ball(\n\t\t\t\tElementIDPrefix.Ball + i, color,\n\t\t\t\tcolor * ballSize,0,\n\t\t\t\tcolor * ballSize,0\n\t\t\t);\n\t\t\tthis.balls.push(ball);\n\t\t}\n\t}\n\n\t_modified() {\n\t\tlet cp = new PitchFutsal();\n\t\tcp.isModified = true;\n\t\tcp.players = this.players;\n\t\tcp.balls = this.balls;\n\t\tcp.squareID = this.squareID;\n\t\tcp.squares = this.squares;\n\t\tcp.ellipseID = this.ellipseID;\n\t\tcp.ellipses = this.ellipses;\n\t\tcp.lineID = this.lineID;\n\t\tcp.lines = this.lines;\n\t\tcp.textID = this.textID;\n\t\tcp.texts = this.texts;\n\t\tcp._overlay = this.overlay;\n\t\t// trigger event modified\n\t\tif (null !== this.onModified) {\n\t\t\tthis.onModified(cp);\n\t\t}\n\t}\n\n\tplayerMove(id, deltaX, deltaY) {\n\t\tthis.players = this.players.map(p => {\n\t\t\tif (id === p.id) {\n\t\t\t\tp.x += deltaX;\n\t\t\t\tp.y += deltaY;\n\t\t\t}\n\t\t\treturn p;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tplayerEditStart(id) {\n\t\tif (!id.startsWith(ElementIDPrefix.Player)) {\n\t\t\treturn null;\n\t\t}\n\t\t// Edit player data\n\t\tconst p = this.players.find(p => id === p.id);\n\t\t// disable editing non placed players\n\t\tif (!p.isPlaced) {\n\t\t\treturn null;\n\t\t}\n\t\tconst editPlayer = {\n\t\t\tid: p.id,\n\t\t\tname: p.name,\n\t\t\tno: p.no\n\t\t}\n\t\treturn editPlayer;\n\t}\n\n\tplayerEditDone(player) {\n\t\tthis.players = this.players.map(p => {\n\t\t\tif (player.id !== p.id) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tif (player.remove) {\n\t\t\t\tp.reset();\n\t\t\t} else {\n\t\t\t\tp.name = player.name;\n\t\t\t\tp.no = player.no;\n\t\t\t}\n\t\t\treturn p;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\n\tballMove(id, deltaX, deltaY) {\n\t\tthis.balls = this.balls.map(b => {\n\t\t\tif (id === b.id) {\n\t\t\t\tb.x += deltaX;\n\t\t\t\tb.y += deltaY;\n\t\t\t}\n\t\t\treturn b;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tlineNewID() {\n\t\tthis.lineID += 1;\n\t\treturn ElementIDPrefix.Line + this.lineID;\n\t}\n\n\tlineCreate(x,y, color, arrowStart, arrowEnd, isDashed) {\n\t\tlet l = new Line(\n\t\t\tthis.lineNewID(), color,\n\t\t\tnew Point(x,y),\n\t\t\tnew Point(x,y),\n\t\t\tnew Point(x,y),\n\t\t\tnew Point(x,y),\n\t\t\tarrowStart,\n\t\t\tarrowEnd,\n\t\t\tisDashed\n\t\t);\n\t\tthis.lines = this.lines.map((lx) => lx);\n\t\tthis.lines.push(l);\n\t\tthis._modified();\n\t\treturn l.id;\n\t}\n\n\tlineResize(id, x2, y2) {\n\t\tthis.lines = this.lines.map(l => {\n\t\t\tif (id === l.id) {\n\t\t\t\tl.resize(x2,y2);\n\t\t\t}\n\t\t\treturn l;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tlineEdit(pid, id, deltaX, deltaY) {\n\t\tthis.lines = this.lines.map(l => {\n\t\t\tif (id === l.id) {\n\t\t\t\tl.edit(pid, deltaX, deltaY);\n\t\t\t}\n\t\t\treturn l;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\t// remove empty lines\n\tlineCleanup() {\n\t\tthis.lines = this.lines.filter(l => !l.empty());\n\t\tthis._modified();\n\t}\n\n\tlineEditStart(id) {\n\t\tif (!id.startsWith(ElementIDPrefix.Line)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.lines = this.lines.map(l => {\n\t\t\tif (id === l.id) {\n\t\t\t\tl.isEdit = true;\n\t\t\t}\n\t\t\treturn l;\n\t\t});\n\t\tthis._modified();\n\t\treturn true;\n\t}\n\n\tlineEditEnd() {\n\t\tthis.lines = this.lines.map(l => {\n\t\t\tl.isEdit = false;\n\t\t\treturn l;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tellipseNewID() {\n\t\tthis.ellipseID += 1;\n\t\treturn ElementIDPrefix.Ellipse + this.ellipseID;\n\t}\n\n\tellipseCreate(x, y, color, isDashed) {\n\t\tlet el = new Ellipse(\n\t\t\tthis.ellipseNewID(), color,\n\t\t\tx,y,0,0,0,\n\t\t\tisDashed\n\t\t);\n\t\tthis.ellipses = this.ellipses.map((e) => e);\n\t\tthis.ellipses.push(el);\n\t\tthis._modified();\n\t\treturn el.id;\n\t}\n\n\tellipseResize(id, x2, y2, proportional) {\n\t\tthis.ellipses = this.ellipses.map(el => {\n\t\t\tif (id === el.id) {\n\t\t\t\tel.resize(x2, y2, proportional);\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tellipseEdit(corner, id, deltaX, deltaY) {\n\t\tif (!id.startsWith(ElementIDPrefix.Ellipse)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.ellipses = this.ellipses.map(el => {\n\t\t\tif (id === el.id) {\n\t\t\t\tel.edit(corner, deltaX, deltaY);\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tellipseRotate(id, posX, posY, snap) {\n\t\tif (!id.startsWith(ElementIDPrefix.Ellipse)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.ellipses = this.ellipses.map(el => {\n\t\t\tif (id === el.id) {\n\t\t\t\tel.rotate(posX, posY, snap);\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\t// remove empty ellipses\n\tellipseCleanup() {\n\t\tthis.ellipses = this.ellipses.filter(el => el.rx > 0 && el.ry > 0);\n\t\tthis._modified();\n\t}\n\n\tellipseEditStart(id) {\n\t\tif (!id.startsWith(ElementIDPrefix.Ellipse)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.ellipses = this.ellipses.map(el => {\n\t\t\tif (id === el.id) {\n\t\t\t\tel.isEdit = true;\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t\tthis._modified();\n\t\treturn true;\n\t}\n\n\tellipsesEditEnd() {\n\t\tthis.ellipses = this.ellipses.map(el => {\n\t\t\tel.isEdit = false;\n\t\t\treturn el;\n\t\t});\n\t}\n\n\tsquareNewID() {\n\t\tthis.squareID += 1;\n\t\treturn ElementIDPrefix.Square + this.squareID;\n\t}\n\n\tsquareCreate(x, y, color, isDashed) {\n\t\tlet sq = new Square(\n\t\t\tthis.squareNewID(), color,\n\t\t\tx,y,0,0,0,\n\t\t\tisDashed\n\t\t);\n\t\tthis.squares = this.squares.map((s) => s);\n\t\tthis.squares.push(sq);\n\t\tthis._modified();\n\t\treturn sq.id;\n\t}\n\n\tsquareResize(id, x2, y2, proportional) {\n\t\tthis.squares = this.squares.map(sq => {\n\t\t\tif (id === sq.id) {\n\t\t\t\tsq.resize(x2, y2, proportional);\n\t\t\t}\n\t\t\treturn sq;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\tsquareEdit(corner, id, deltaX, deltaY) {\n\t\tif (!id.startsWith(ElementIDPrefix.Square)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.squares = this.squares.map(sq => {\n\t\t\tif (id === sq.id) {\n\t\t\t\tsq.edit(corner, deltaX, deltaY);\n\t\t\t}\n\t\t\treturn sq;\n\t\t});\n\t\tthis._modified();\n\t\treturn this.squares;\n\t}\n\n\tsquareRotate(id, posX, posY, snap) {\n\t\tif (!id.startsWith(ElementIDPrefix.Square)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.squares = this.squares.map(sq => {\n\t\t\tif (id === sq.id) {\n\t\t\t\tsq.rotate(posX, posY, snap);\n\t\t\t}\n\t\t\treturn sq;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\t// remove empty squares\n\tsquareCleanup() {\n\t\tthis.squares = this.squares.filter(sq => sq.width > 0 && sq.height > 0);\n\t\tthis._modified();\n\t}\n\n\tsquareEditStart(id) {\n\t\tif (!id.startsWith(ElementIDPrefix.Square)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.squares = this.squares.map(sq => {\n\t\t\tif (id === sq.id) {\n\t\t\t\tsq.isEdit = true;\n\t\t\t}\n\t\t\treturn sq;\n\t\t});\n\t\tthis._modified();\n\t\treturn true;\n\t}\n\n\tsquareEditEnd() {\n\t\tthis.squares = this.squares.map(sq => {\n\t\t\tsq.isEdit = false;\n\t\t\treturn sq;\n\t\t});\n\t}\n\n\ttextNewID() {\n\t\tthis.textID += 1;\n\t\treturn ElementIDPrefix.Text + this.textID;\n\t}\n\n\ttextCreate(x, y, color, size) {\n\t\tlet tx = new Text(\n\t\t\tthis.textNewID(), color, size, \"\",\n\t\t\tx,y,0,\n\t\t\tfalse, true\n\t\t);\n\t\tthis.texts = this.texts.map((t) => t);\n\t\tthis.texts.push(tx);\n\t\tthis._modified();\n\t\treturn tx.id;\n\t}\n\n\ttextEditDone(id, text, bx, by, bwidth, bheight) {\n\t\tthis.texts = this.texts.map(t => {\n\t\t\tif (id === t.id) {\n\t\t\t\tt.isEdit = false;\n\t\t\t\tt.isTextEdit = false;\n\t\t\t\tt.text = text;\n\t\t\t\tt.bx = bx;\n\t\t\t\tt.by = by;\n\t\t\t\tt.bwidth = bwidth;\n\t\t\t\tt.bheight = bheight;\n\t\t\t}\n\t\t\treturn t;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\ttextEditStart(id) {\n\t\tif (!id.startsWith(ElementIDPrefix.Text)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.texts = this.texts.map(tx => {\n\t\t\tif (id === tx.id) {\n\t\t\t\ttx.isEdit = true;\n\t\t\t}\n\t\t\treturn tx;\n\t\t});\n\t\tthis._modified();\n\t\treturn true;\n\t}\n\n\ttextMove(id, deltaX, deltaY) {\n\t\tif (!id.startsWith(ElementIDPrefix.Text)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.texts = this.texts.map(tx => {\n\t\t\tif (id === tx.id) {\n\t\t\t\ttx.move(deltaX, deltaY);\n\t\t\t}\n\t\t\treturn tx;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\ttextRotate(id, posX, posY, snap) {\n\t\tif (!id.startsWith(ElementIDPrefix.Text)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.texts = this.texts.map(tx => {\n\t\t\tif (id === tx.id) {\n\t\t\t\ttx.rotate(posX, posY, snap);\n\t\t\t}\n\t\t\treturn tx;\n\t\t});\n\t\tthis._modified();\n\t}\n\n\teditTopLeft(id, deltaX, deltaY) {\n\t\tthis.squareEdit(\"tl\",id, deltaX, deltaY);\n\t\tthis.ellipseEdit(\"tl\",id, deltaX, deltaY);\n\t}\n\t\n\teditTopRight(id, deltaX, deltaY) {\n\t\tthis.squareEdit(\"tr\",id, deltaX, deltaY);\n\t\tthis.ellipseEdit(\"tr\",id, deltaX, deltaY);\n\t}\n\n\teditBottomLeft(id, deltaX, deltaY) {\n\t\tthis.squareEdit(\"bl\",id, deltaX, deltaY);\n\t\tthis.ellipseEdit(\"bl\",id, deltaX, deltaY);\n\t}\n\n\teditBottomRight(id, deltaX, deltaY) {\n\t\tthis.squareEdit(\"br\",id, deltaX, deltaY);\n\t\tthis.ellipseEdit(\"br\",id, deltaX, deltaY);\n\t}\n\n\teditMove(id, deltaX, deltaY) {\n\t\tthis.squareEdit(\"mv\",id, deltaX, deltaY);\n\t\tthis.ellipseEdit(\"mv\",id, deltaX, deltaY);\n\t\tthis.textMove(id, deltaX, deltaY);\n\t}\n\n\teditRotate(id, posX, posY, snap) {\n\t\tthis.squareRotate(id, posX, posY, snap);\n\t\tthis.ellipseRotate(id, posX, posY, snap);\n\t\tthis.textRotate(id, posX, posY, snap);\n\t}\n\n\tendAllEdits() {\n\t\tthis.lineEditEnd();\n\t\tthis.squareEditEnd();\n\t\tthis.ellipsesEditEnd();\n\t\t// TODO: Text end editing\n\t\tthis._modified();\n\t}\n\n\tget overlay() {\n\t\treturn this._overlay;\n\t}\n\n\tset overlay(value) {\n\t\tif (this._overlay === value) {\n\t\t\treturn;\n\t\t}\n\t\tthis._overlay = value;\n\t\tthis._modified();\n\t}\n\n\toverlaySize() {\n\t\tswitch (this.overlay) {\n\t\t\tcase \"exercise\":\n\t\t\t\treturn {width:2800, height:2000};\n\t\t\tcase \"basketball\":\n\t\t\t\treturn {width:2800, height:1500}\n\t\t\tcase \"volleyball\":\n\t\t\t\treturn {width:1800, height:900}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport default PitchFutsal;"]},"metadata":{},"sourceType":"module"}