{"ast":null,"code":"var _jsxFileName = \"/home/fsat/repos/tactics-board/src/ui/FullscreenToggle.js\";\nimport React, { Component } from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'; // TODO: Fix fullscreen exit on esc key\n\nclass FullscreenToggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullScreen: false\n    };\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\n  }\n\n  domFullScreenToggle(toFullScreen) {\n    if (toFullScreen) {\n      var elem = document.documentElement;\n\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        /* Firefox */\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Chrome, Safari & Opera */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE/Edge */\n        elem.msRequestFullscreen();\n      }\n\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    }\n  }\n\n  toggleFullScreen() {\n    const isFullScreen = !this.state.fullScreen; // dom toogle\n\n    this.domFullScreenToggle(isFullScreen); // change state to update buttons\n\n    this.setState({\n      fullScreen: isFullScreen\n    });\n  }\n\n  fsIconGet() {\n    if (this.state.fullScreen) {\n      return /*#__PURE__*/React.createElement(FullscreenExitIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(FullscreenIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    const fsIcon = this.fsIconGet();\n    const fsLabel = this.state.fullScreen ? \"Exit full screen\" : \"Enter full screen\";\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: fsLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": fsLabel,\n      color: \"inherit\",\n      onClick: this.toggleFullScreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }, fsIcon));\n  }\n\n}\n\nexport default FullscreenToggle;","map":{"version":3,"sources":["/home/fsat/repos/tactics-board/src/ui/FullscreenToggle.js"],"names":["React","Component","Tooltip","IconButton","FullscreenIcon","FullscreenExitIcon","FullscreenToggle","constructor","props","state","fullScreen","toggleFullScreen","bind","domFullScreenToggle","toFullScreen","elem","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","isFullScreen","setState","fsIconGet","render","fsIcon","fsLabel"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B,C,CAEA;;AACA,MAAMC,gBAAN,SAA+BL,SAA/B,CAAyC;AACxCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,UAAU,EAAE;AADA,KAAb;AAIA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA;;AAEDC,EAAAA,mBAAmB,CAACC,YAAD,EAAe;AACjC,QAAIA,YAAJ,EAAkB;AACjB,UAAIC,IAAI,GAAGC,QAAQ,CAACC,eAApB;;AACA,UAAIF,IAAI,CAACG,iBAAT,EAA4B;AAC3BH,QAAAA,IAAI,CAACG,iBAAL;AACC,OAFF,MAEQ,IAAIH,IAAI,CAACI,oBAAT,EAA+B;AAAE;AACxCJ,QAAAA,IAAI,CAACI,oBAAL;AACC,OAFM,MAEA,IAAIJ,IAAI,CAACK,uBAAT,EAAkC;AAAE;AAC3CL,QAAAA,IAAI,CAACK,uBAAL;AACC,OAFM,MAEA,IAAIL,IAAI,CAACM,mBAAT,EAA8B;AAAE;AACvCN,QAAAA,IAAI,CAACM,mBAAL;AACA;;AACD;AACA;;AAED,QAAIL,QAAQ,CAACM,cAAb,EAA6B;AAC5BN,MAAAA,QAAQ,CAACM,cAAT;AACA,KAFD,MAEO,IAAIN,QAAQ,CAACO,mBAAb,EAAkC;AACxCP,MAAAA,QAAQ,CAACO,mBAAT;AACA,KAFM,MAEA,IAAIP,QAAQ,CAACQ,oBAAb,EAAmC;AACzCR,MAAAA,QAAQ,CAACQ,oBAAT;AACA,KAFM,MAEA,IAAIR,QAAQ,CAACS,gBAAb,EAA+B;AACrCT,MAAAA,QAAQ,CAACS,gBAAT;AACA;AACD;;AAEDd,EAAAA,gBAAgB,GAAG;AAClB,UAAMe,YAAY,GAAG,CAAC,KAAKjB,KAAL,CAAWC,UAAjC,CADkB,CAElB;;AACA,SAAKG,mBAAL,CAAyBa,YAAzB,EAHkB,CAIlB;;AACA,SAAKC,QAAL,CAAc;AACbjB,MAAAA,UAAU,EAACgB;AADE,KAAd;AAGA;;AAEDE,EAAAA,SAAS,GAAE;AACV,QAAI,KAAKnB,KAAL,CAAWC,UAAf,EAA2B;AAC1B,0BAAO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA,KAFD,MAEO;AACN,0BAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA;;AAAA;AACD;;AAEDmB,EAAAA,MAAM,GAAG;AACR,UAAMC,MAAM,GAAG,KAAKF,SAAL,EAAf;AACA,UAAMG,OAAO,GAAG,KAAKtB,KAAL,CAAWC,UAAX,GAAwB,kBAAxB,GAA6C,mBAA7D;AAEA,wBACC,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEqB,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,UAAD;AAAY,oBAAYA,OAAxB;AAAiC,MAAA,KAAK,EAAC,SAAvC;AAAiD,MAAA,OAAO,EAAE,KAAKpB,gBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEmB,MADF,CADD,CADD;AAOA;;AAjEuC;;AAoEzC,eAAexB,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\n\n// TODO: Fix fullscreen exit on esc key\nclass FullscreenToggle extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfullScreen: false\n\t\t}\n\n\t\tthis.toggleFullScreen = this.toggleFullScreen.bind(this);\n\t}\n\n\tdomFullScreenToggle(toFullScreen) {\n\t\tif (toFullScreen) {\n\t\t\tvar elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t\t} else if (elem.mozRequestFullScreen) { /* Firefox */\n\t\t\t\telem.mozRequestFullScreen();\n\t\t\t\t} else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t\t} else if (elem.msRequestFullscreen) { /* IE/Edge */\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (document.exitFullscreen) {\n\t\t\tdocument.exitFullscreen();\n\t\t} else if (document.mozCancelFullScreen) {\n\t\t\tdocument.mozCancelFullScreen();\n\t\t} else if (document.webkitExitFullscreen) {\n\t\t\tdocument.webkitExitFullscreen();\n\t\t} else if (document.msExitFullscreen) {\n\t\t\tdocument.msExitFullscreen();\n\t\t}\n\t}\n\n\ttoggleFullScreen() {\n\t\tconst isFullScreen = !this.state.fullScreen;\n\t\t// dom toogle\n\t\tthis.domFullScreenToggle(isFullScreen);\n\t\t// change state to update buttons\n\t\tthis.setState({\n\t\t\tfullScreen:isFullScreen\n\t\t});\n\t}\n\n\tfsIconGet(){\n\t\tif (this.state.fullScreen) {\n\t\t\treturn(<FullscreenExitIcon />);\n\t\t} else {\n\t\t\treturn(<FullscreenIcon />);\n\t\t};\n\t}\n\n\trender() {\n\t\tconst fsIcon = this.fsIconGet();\n\t\tconst fsLabel = this.state.fullScreen ? \"Exit full screen\" : \"Enter full screen\";\n\n\t\treturn (\n\t\t\t<Tooltip title={fsLabel}>\n\t\t\t\t<IconButton aria-label={fsLabel} color=\"inherit\" onClick={this.toggleFullScreen}>\n\t\t\t\t\t{fsIcon}\n\t\t\t\t</IconButton>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n}\n\nexport default FullscreenToggle;"]},"metadata":{},"sourceType":"module"}