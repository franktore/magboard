{"ast":null,"code":"var _jsxFileName = \"/home/fsat/repos/tactics-board/src/ui/PaletteDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DrawMode from '../pitch/DrawMode';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Radio from '@material-ui/core/Radio';\nimport CheckIcon from '@material-ui/icons/Check'; // this is for offset from toolbar and default class\n\nconst styles = theme => ({\n  radio: {\n    padding: 0\n  },\n  radioIcon: {\n    width: 48,\n    height: 48\n  },\n  radioIconSelected: {\n    width: 48,\n    height: 48,\n    border: '1px solid white',\n    color: theme.palette.common.white,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nclass PaletteDialog extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      open: false\n    };\n    this.Show = this.Show.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.colorChange = this.colorChange.bind(this);\n  }\n\n  Show() {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      open: false\n    });\n  }\n\n  colorChange(e) {\n    this.props.drawMode.color = parseInt(e.target.value);\n    this.handleClose();\n  }\n\n  radioIcon(isChecked, color) {\n    if (!isChecked) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: this.props.classes.radioIcon,\n        style: {\n          backgroundColor: color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 5\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.classes.radioIconSelected,\n      style: {\n        backgroundColor: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(CheckIcon, {\n      style: {\n        fontSize: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }));\n  }\n\n  renderRadios() {\n    const dm = this.props.drawMode;\n    return dm.colorOptions.map((col, index) => {\n      const ico = this.radioIcon(false, col);\n      const icoChk = this.radioIcon(true, col);\n      return /*#__PURE__*/React.createElement(Radio, {\n        name: \"color-select\",\n        key: index,\n        value: index,\n        className: this.props.classes.radio,\n        checked: index === dm.color,\n        icon: ico,\n        checkedIcon: icoChk,\n        onChange: this.colorChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 5\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"responsive-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"responsive-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, \"Color palette\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, this.renderRadios()));\n  }\n\n}\n\nPaletteDialog.defaultProps = {\n  drawMode: null\n};\nPaletteDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  drawMode: PropTypes.instanceOf(DrawMode)\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(PaletteDialog);","map":{"version":3,"sources":["/home/fsat/repos/tactics-board/src/ui/PaletteDialog.js"],"names":["React","Component","PropTypes","DrawMode","withStyles","Dialog","DialogTitle","DialogContent","Radio","CheckIcon","styles","theme","radio","padding","radioIcon","width","height","radioIconSelected","border","color","palette","common","white","display","justifyContent","alignItems","PaletteDialog","constructor","props","context","state","open","Show","bind","handleClose","colorChange","setState","e","drawMode","parseInt","target","value","isChecked","classes","backgroundColor","fontSize","renderRadios","dm","colorOptions","map","col","index","ico","icoChk","render","defaultProps","propTypes","object","isRequired","instanceOf","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DrawMode from '../pitch/DrawMode';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Radio from '@material-ui/core/Radio';\nimport CheckIcon from '@material-ui/icons/Check';\n\n// this is for offset from toolbar and default class\nconst styles = theme => ({\n\tradio: {\n\t\tpadding: 0,\n\t},\n\tradioIcon: {\n\t\twidth: 48,\n\t\theight: 48,\n\t},\n\tradioIconSelected: {\n\t\twidth: 48,\n\t\theight: 48,\n\t\tborder: '1px solid white',\n\t\tcolor: theme.palette.common.white,\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t}\n})\n\nclass PaletteDialog extends Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\topen: false\n\t\t}\n\t\tthis.Show = this.Show.bind(this);\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t\tthis.colorChange = this.colorChange.bind(this);\n\t}\n\n\tShow() {\n\t\tthis.setState({\n\t\t\topen: true\n\t\t});\n\t}\n\n\thandleClose() {\n\t\tthis.setState({\n\t\t\topen: false\n\t\t});\n\t}\n\n\tcolorChange(e) {\n\t\tthis.props.drawMode.color = parseInt(e.target.value);\n\t\tthis.handleClose();\n\t}\n\n\tradioIcon(isChecked, color) {\n\t\tif (!isChecked) {\n\t\t\treturn (\n\t\t\t\t<div className={this.props.classes.radioIcon} style={{ backgroundColor: color }} />\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className={this.props.classes.radioIconSelected} style={{ backgroundColor: color }}>\n\t\t\t\t<CheckIcon style={{ fontSize: 30 }} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderRadios() {\n\t\tconst dm = this.props.drawMode;\n\t\treturn dm.colorOptions.map((col, index) => {\n\t\t\tconst ico = this.radioIcon(false, col);\n\t\t\tconst icoChk = this.radioIcon(true, col);\n\t\t\treturn (\n\t\t\t\t<Radio name=\"color-select\" key={index} value={index} className={this.props.classes.radio} checked={index === dm.color} icon={ico} checkedIcon={icoChk} onChange={this.colorChange} />\n\t\t\t);\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"responsive-dialog-title\">\n\t\t\t\t<DialogTitle id=\"responsive-dialog-title\">Color palette</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t{this.renderRadios()}\n\t\t\t\t</DialogContent>\n\t\t\t</Dialog>\n\t\t);\n\t}\n}\n\nPaletteDialog.defaultProps = {\n\tdrawMode: null\n}\n\nPaletteDialog.propTypes = {\n\tclasses: PropTypes.object.isRequired,\n\tdrawMode: PropTypes.instanceOf(DrawMode)\n};\n\nexport default withStyles(styles, { withTheme: true })(PaletteDialog);"]},"metadata":{},"sourceType":"module"}